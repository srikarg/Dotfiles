### Custom Functions

# fzf history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# fzf git branch - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fzf git checkout - checkout git branch/tag
fco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi) || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# Simple calculator
function calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
            sed -e 's/^\./0./' $(# add "0" for cases like ".5"` \
                -e 's/^-\./-0./'
            ) # add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//' # remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Rutgers CS SSH Shortcut
function rucs() {
    ssh svg42@"$@".cs.rutgers.edu
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}"
    local ip=$(ipconfig getifaddr en1)
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}"
}

# Jekyll Shortcuts
function j() {
    if [ $1 == "b" ]; then
        jekyll build .
    elif [ $1 == "s" ]; then
        jekyll serve --watch .
    fi
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
    if [ $# -eq 0 ]; then
        subl .
    else
        subl "$@"
    fi
}

function c() {
    if [ $# -eq 0 ]; then
        code .
    else
        code "$@"
    fi
}

# Tree function

function t() {
    if [ $# -eq 0 ]; then
        tree -L 2
    else
        tree -L $1
    fi
}

function venv3() {
    if [ $# -eq 0 ]; then
        virtualenv -p python3 ./
        source ./bin/activate
    else
        mkd "$@"
        virtualenv -p python3 ./
        source ./bin/activate
    fi
}

function venv() {
    if [ $# -eq 0 ]; then
        virtualenv ./
        source ./bin/activate
    else
        mkd "$@"
        virtualenv ./
        source ./bin/activate
    fi
}

# `a` with no arguments opens the current directory in Github's Atom Text Editor, otherwise
# opens the given location
function a() {
    if [ $# -eq 0 ]; then
        open -a /Applications/Atom.app/ .
    else
        open -a /Applications/Atom.app/ "$@"
    fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
    if [ $# -eq 0 ]; then
        vim .
    else
        vim "$@"
    fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# Set the volume with a number between 1 and 100
function vol() {
    if [ $# -eq 0 ]; then
        osascript -e 'set volume output volume 0 --mute'
    else
        osascript -e "set volume output volume $1 --$1%"
    fi
}

function te() {
    open "$@" -a textedit
}
